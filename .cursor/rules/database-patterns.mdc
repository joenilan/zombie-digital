---
description: 
globs: 
alwaysApply: true
---
---
description: Database and API patterns for Supabase integration with MCP server
alwaysApply: true
---

# Database & API Patterns

## Supabase Client Usage
Always use the appropriate Supabase client for the context:

```typescript
// For server components
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'

const supabase = createServerComponentClient({ cookies })

// For client components
import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'

const supabase = createClientComponentClient()
```

## Database Query Patterns
- Always use proper error handling
- Use TypeScript types for query results
- Implement proper loading states
- Use React Query for client-side data fetching

```typescript
// Example query pattern
const { data: users, error } = await supabase
  .from('twitch_users')
  .select('*')
  .eq('site_role', 'user')
  .order('created_at', { ascending: false })

if (error) {
  console.error('Database error:', error)
  throw new Error('Failed to fetch users')
}
```

## Real-time Subscriptions
Use Supabase real-time for live updates:

```typescript
useEffect(() => {
  const channel = supabase
    .channel(`table_${id}`)
    .on('postgres_changes', {
      event: '*',
      schema: 'public',
      table: 'table_name',
      filter: `user_id=eq.${userId}`
    }, (payload) => {
      // Handle real-time updates
    })
    .subscribe()

  return () => {
    channel.unsubscribe()
  }
}, [supabase, userId])
```

## API Route Patterns
- Use proper HTTP status codes
- Implement error handling
- Validate input data
- Use TypeScript for request/response types

## Security
- Always use Row Level Security (RLS)
- Validate user permissions
- Sanitize user inputs
- Use proper authentication checks

